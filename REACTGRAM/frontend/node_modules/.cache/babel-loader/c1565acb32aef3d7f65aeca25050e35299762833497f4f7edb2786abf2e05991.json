{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport photoService from \"../services/photoService\";\nconst initialState = {\n  photos: [],\n  photo: {},\n  error: false,\n  success: false,\n  loading: false,\n  message: null\n};\n\n// Publish user photo\nexport const publishPhoto = createAsyncThunk(\"photo/publish\", async (photo, thunkAPI) => {\n  const token = thunkAPI.getState().auth.user.token;\n  const data = await photoService.publishPhoto(photo, token);\n\n  // Check for errors\n  if (data.errors) {\n    return thunkAPI.rejectWithValue(data.errors[0]);\n  }\n  return data;\n});\n\n// Get user photos\nexport const getUserPhotos = createAsyncThunk(\"photo/userphotos\");\nexport const photoSlice = createSlice({\n  name: \"photo\",\n  initialState,\n  reducers: {\n    resetMessage: state => {\n      state.message = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(publishPhoto.pending, state => {\n      state.loading = true;\n      state.error = false;\n    }).addCase(publishPhoto.fulfilled, (state, action) => {\n      state.loading = false;\n      state.success = true;\n      state.error = null;\n      state.photo = action.payload;\n      state.photos.unshift(state.photo);\n      state.message = \"Foto publicada com sucesso!\";\n    }).addCase(publishPhoto.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n      state.photo = {};\n    });\n  }\n});\nexport const {\n  resetMessage\n} = photoSlice.actions;\nexport default photoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","photoService","initialState","photos","photo","error","success","loading","message","publishPhoto","thunkAPI","token","getState","auth","user","data","errors","rejectWithValue","getUserPhotos","photoSlice","name","reducers","resetMessage","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","unshift","rejected","actions","reducer"],"sources":["C:/Users/leoga/Desktop/Backup/GitHub/reactgram-project/REACTGRAM/frontend/src/slices/photoSlice.js"],"sourcesContent":["import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\"\r\nimport photoService from \"../services/photoService\"\r\n\r\nconst initialState = {\r\n    photos: [],\r\n    photo: {},\r\n    error: false,\r\n    success: false,\r\n    loading: false,\r\n    message: null\r\n}\r\n\r\n// Publish user photo\r\nexport const publishPhoto = createAsyncThunk(\r\n    \"photo/publish\",\r\n    async(photo, thunkAPI) => {\r\n\r\n        const token = thunkAPI.getState().auth.user.token\r\n\r\n        const data = await photoService.publishPhoto(photo, token)\r\n\r\n        // Check for errors\r\n        if(data.errors) {\r\n            return thunkAPI.rejectWithValue(data.errors[0])\r\n        }\r\n\r\n        return data\r\n    }\r\n)\r\n\r\n// Get user photos\r\nexport const getUserPhotos = createAsyncThunk(\r\n    \"photo/userphotos\",\r\n    \r\n)\r\n\r\nexport const photoSlice = createSlice({\r\n    name: \"photo\",\r\n    initialState,\r\n    reducers: {\r\n        resetMessage: (state) => {\r\n            state.message = null\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(publishPhoto.pending, (state) => {\r\n                state.loading = true\r\n                state.error = false\r\n            })\r\n            .addCase(publishPhoto.fulfilled, (state, action) => {\r\n                state.loading = false\r\n                state.success = true\r\n                state.error = null\r\n                state.photo = action.payload\r\n                state.photos.unshift(state.photo)\r\n                state.message = \"Foto publicada com sucesso!\"\r\n            })\r\n            .addCase(publishPhoto.rejected, (state, action) => {\r\n                state.loading = false\r\n                state.error = action.payload\r\n                state.photo = {}\r\n            })\r\n    },\r\n})\r\n\r\nexport const {resetMessage} = photoSlice.actions\r\nexport default photoSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,gBAAgB,QAAO,kBAAkB;AAC9D,OAAOC,YAAY,MAAM,0BAA0B;AAEnD,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAE,EAAE;EACVC,KAAK,EAAE,CAAC,CAAC;EACTC,KAAK,EAAE,KAAK;EACZC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGT,gBAAgB,CACxC,eAAe,EACf,OAAMI,KAAK,EAAEM,QAAQ,KAAK;EAEtB,MAAMC,KAAK,GAAGD,QAAQ,CAACE,QAAQ,EAAE,CAACC,IAAI,CAACC,IAAI,CAACH,KAAK;EAEjD,MAAMI,IAAI,GAAG,MAAMd,YAAY,CAACQ,YAAY,CAACL,KAAK,EAAEO,KAAK,CAAC;;EAE1D;EACA,IAAGI,IAAI,CAACC,MAAM,EAAE;IACZ,OAAON,QAAQ,CAACO,eAAe,CAACF,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;EACnD;EAEA,OAAOD,IAAI;AACf,CAAC,CACJ;;AAED;AACA,OAAO,MAAMG,aAAa,GAAGlB,gBAAgB,CACzC,kBAAkB,CAErB;AAED,OAAO,MAAMmB,UAAU,GAAGpB,WAAW,CAAC;EAClCqB,IAAI,EAAE,OAAO;EACblB,YAAY;EACZmB,QAAQ,EAAE;IACNC,YAAY,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAACf,OAAO,GAAG,IAAI;IACxB;EACJ,CAAC;EACDgB,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACjB,YAAY,CAACkB,OAAO,EAAGJ,KAAK,IAAK;MACtCA,KAAK,CAAChB,OAAO,GAAG,IAAI;MACpBgB,KAAK,CAAClB,KAAK,GAAG,KAAK;IACvB,CAAC,CAAC,CACDqB,OAAO,CAACjB,YAAY,CAACmB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAChDN,KAAK,CAAChB,OAAO,GAAG,KAAK;MACrBgB,KAAK,CAACjB,OAAO,GAAG,IAAI;MACpBiB,KAAK,CAAClB,KAAK,GAAG,IAAI;MAClBkB,KAAK,CAACnB,KAAK,GAAGyB,MAAM,CAACC,OAAO;MAC5BP,KAAK,CAACpB,MAAM,CAAC4B,OAAO,CAACR,KAAK,CAACnB,KAAK,CAAC;MACjCmB,KAAK,CAACf,OAAO,GAAG,6BAA6B;IACjD,CAAC,CAAC,CACDkB,OAAO,CAACjB,YAAY,CAACuB,QAAQ,EAAE,CAACT,KAAK,EAAEM,MAAM,KAAK;MAC/CN,KAAK,CAAChB,OAAO,GAAG,KAAK;MACrBgB,KAAK,CAAClB,KAAK,GAAGwB,MAAM,CAACC,OAAO;MAC5BP,KAAK,CAACnB,KAAK,GAAG,CAAC,CAAC;IACpB,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACkB;AAAY,CAAC,GAAGH,UAAU,CAACc,OAAO;AAChD,eAAed,UAAU,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}